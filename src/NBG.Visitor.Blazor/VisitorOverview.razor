@using AutoMapper
@using MudBlazor;
@using NBG.Visitor.Blazor.Dtos
@using NBG.Visitor;
@using NBG.Visitor.Services.DB;
@using NBG.Visitor.Blazor.Mapping;

@inject VisitContext _repo;

@inject IDialogService DialogService

@if (!isLoaded)
{
    <p><em>Loading Visitors...</em></p>
}
else
{
    <MudTable style="height:100%" Items=@Visits Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Elevation=1 Class="ml-0 mr-0" Filter="new Func<VisitDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Visits</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.LastName)">Last Name</MudTableSortLabel></MudTh>
            <MudTh>Phone Number</MudTh>
            <MudTh>Email</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Company.CompanyLabel)">Company</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.ContactPerson.Name)">Contact Person</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<VisitDto, object>(x=>x.VisitStart)">Start</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.VisitEnd)">End</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.Visitor.FirstName</MudTd>
            <MudTd>@context.Visitor.LastName</MudTd>
            <MudTd>@context.Visitor.PhoneNumber</MudTd>
            <MudTd>@context.Visitor.Email</MudTd>
            <MudTd>@context.Company.CompanyLabel</MudTd>
            <MudTd>@context.ContactPerson.Name</MudTd>
            <MudTd>@context.VisitStart</MudTd>
            <MudTd>@context.VisitEnd</MudTd>
            <MudTd Class = "status">
                @if (@context.Status == VisitStatusDto.VISIT_ACTIVE.ToString())
                {
                    //<MudChip Color="Color.Success">@context.Status</MudChip>
                    //<div><MudText Color="Color.Success">@context.Status</MudText></div>
                    <MudChip Color="Color.Success" Size=Size.Small>Visit Active</MudChip> 
                }
                else if(@context.Status == VisitStatusDto.VISIT_OVER.ToString()){
                    //<div><MudText Color="Color.Error">@context.Status</MudText></div>
                    <MudChip Color="Color.Error" Size=Size.Small>Visit Over</MudChip>
                }
                else{
                    //<div><MudText Color="Color.Warning">@context.Status</MudText></div>
                    <MudChip Color="Color.Warning" Size=Size.Small>Visit Pending</MudChip>
                }
            </MudTd>
            <MudTd Style = "padding-top:0px;padding-bottom:0px;">
                <MudFab OnClick=@(()=>Delete(@context)) Size=Size.Small Class="ml-5" DisableElevation=true Icon=@Icons.Filled.Delete></MudFab>
                @if (@context.Status == VisitStatusDto.VISIT_ACTIVE.ToString())
                {
                    <MudFab OnClick=@(()=>SignOff(@context)) Size=Size.Small Class="ml-5" DisableElevation=true Icon=@Icons.Filled.Logout></MudFab>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    bool isLoaded;

    private string searchString = "";
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private int[] pageSizeOptions = new int[] { 11 };

    protected override async Task OnInitializedAsync()
    {
        var mapper = ConfigMapper();

        var visits = await _repo.ReadAllVisits();
        foreach(var visit in visits){
            Visits.Add(mapper.Map<VisitDto>(visit));
        }
        isLoaded = true;
    }

    public async Task SignOff(VisitDto visit)
    {
        var mapper = ConfigMapper();

        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to manually sign off this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Sign Off");
        parameters.Add("Color", Color.Warning);

        var dialog = DialogService.Show<Dialog>("Sign Off Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            visit.VisitEnd = DateTime.Now;
            visit.Status = VisitStatusDto.VISIT_OVER.ToString();
            await _repo.UpdateVisit(mapper.Map<Storage.Models.Visit>(visit));
        }
    }

    public async Task Delete(VisitDto visit)
    {
        var mapper = ConfigMapper();

        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to delete this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<Dialog>("Delete Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await _repo.RemoveVisit(mapper.Map<Storage.Models.Visit>(visit));
            Visits.Remove(visit);
        }
    }

    private bool FilterFunc(VisitDto visit)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (visit.Visitor.FirstName.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Visitor.LastName.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Visitor.Email.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Visitor.PhoneNumber.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.ContactPerson.Name != null)
            if (visit.ContactPerson.Name.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Company.CompanyLabel != null)
            if (visit.Company.CompanyLabel.ToLower().Contains(searchString.ToLower()))
            return true;
        return false;
    }

    public IMapper ConfigMapper()
    {
        var config = new AutoMapperConfiguration().Configure();
        return config.CreateMapper();
    }

    private List<VisitDto> Visits = new List<VisitDto>();
}