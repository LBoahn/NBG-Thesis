@using Microsoft.JSInterop
@using NBG.Visitor.Domain.Dtos;
@using MudBlazor;
@using Radzen.Blazor;
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS;

<style>
    .timePickerToolbar{
        width:100%;

    }
</style>


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if(mode == "Add")
            {
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-3 mb-n1"/>
                @Loc["AddVisit"]
            }
            else if (mode == "Edit")
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
                @Loc["EditVisit"]
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@visit.Visitor.FirstName" Label=@Loc["FirstName"] Required="true"/>
            <MudTextField @bind-Value="@visit.Visitor.LastName" Label=@Loc["LastName"] Required="true"/>
            <MudTextField @bind-Value="@visit.Visitor.PhoneNumber" Label=@Loc["PhoneNr"] Required="true" Validation="@(new PhoneAttribute() {ErrorMessage = @Loc["WrongPhone"]})"/>
            <MudTextField @bind-Value="@visit.Visitor.Email" Label=@Loc["Email"] Validation=@(new Func<string, string>(ValidateEmail))/>
            <MudTextField @bind-Value="@visit.CompanyLabel" Label=@Loc["Company"]/>
            <MudTextField @bind-Value="@visit.ContactPerson" Label=@Loc["ContactPerson"]/>
            <div class="datetimecontainer">
                <MudDatePicker Label=@Loc["StartDate"] @bind-Date="@startDate" Culture="@Loc.Culture" Style="width:90%;" DisableToolbar="true"/>
                <MudTimePicker Label=@Loc["StartTime"] @bind-Time="@startTime" Culture="@Loc.Culture" AmPm="@((Loc.Culture.ToString() == "en-US")? true : false )"/>
            </div>
            @if(mode == "Edit")
            {
                <div class="datetimecontainer">
                    <MudDatePicker Label=@Loc["EndDate"] @bind-Date="@endDate" Culture="@Loc.Culture" Style="width:90%;" DisableToolbar="true"/>    
                    <MudTimePicker Label=@Loc["EndTime"] @bind-Time="@endTime" Culture="@Loc.Culture" AmPm="@((Loc.Culture.ToString() == "en-US")? true : false )"/>
                </div>
            }
            <div class="d-flex justify-end mt-6">
                <MudButton Class="pa-2 mx-2" OnClick="Cancel" Variant="Variant.Filled">@Loc["Cancel"]</MudButton>
                <MudButton Class="pa-2 mx-2" Color="Color.Success" OnClick="EditVisit" Disabled="@(!success)" Variant="Variant.Filled">@Loc["Save"]</MudButton>
            </div>
        </MudForm>  
    </DialogContent>
</MudDialog>
 
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public VisitDto visit { get; set; } = new VisitDto();
    [Parameter] public string mode { get; set; }
    [Parameter] public Localizer Loc { get; set; }

    private DateTime? startDate { get; set; }
    private TimeSpan? startTime { get; set; }
    private DateTime? endDate { get; set; }
    private TimeSpan? endTime { get; set; }

    bool success { get; set; }

    protected override async Task OnInitializedAsync()
    {
        startDate = @visit.VisitStart ?? null;
        endDate = @visit.VisitEnd ?? null;
        if (@visit.VisitStart != null)
            startTime = @visit.VisitStart.Value.TimeOfDay;
        else
            startTime = null;
        if (@visit.VisitEnd != null)
            endTime = @visit.VisitEnd.Value.TimeOfDay;
        else
            endTime = null;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void EditVisit()
    {
        if (startTime != null)
        {
            startDate -= startDate.Value.TimeOfDay;
            startDate += startTime;
        }
        else if (startDate != null)
        {
            startDate -= startDate.Value.TimeOfDay;
            startDate += new TimeSpan(12, 0, 0);
        }

        if (endTime != null)
        {
            endDate -= endDate.Value.TimeOfDay;
            endDate += endTime;
        }
        else if (endDate != null)
        {
            endDate -= endDate.Value.TimeOfDay;
            endDate += new TimeSpan(12, 0, 0);
        }
        
        visit.VisitStart = startDate??null;
        visit.VisitEnd = endDate??null;
        MudDialog.Close(DialogResult.Ok(visit));
    }

    private string ValidateEmail(string email)
    {
        email = email?.Trim();
        if (email == null || email == "")
            return null;
        else
        {
            if (new EmailAddressAttribute().IsValid(email))
                return null;
            else
                return Loc["WrongEmail"];
        }
    }
}

