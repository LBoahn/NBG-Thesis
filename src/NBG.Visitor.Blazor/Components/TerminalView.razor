@using MudBlazor;
@using NBG.Visitor.Blazor.Components.Dialogs
@using NBG.Visitor.Blazor.Components.TerminalSubComponents
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Domain;
@using System.Reflection
@using PdfSharp.Pdf
@using QRCoder
@using System.Drawing
@using System.Net

@inject IDialogService Dialog;
@inject IVisitService vs;

<link href="_content/NBG.Visitor.Blazor/css/site.css" rel="stylesheet"/>

<MudThemeProvider Theme="NBG"/>

<div style=@Style>
    <CustomMudCarousel Style="height: 100%; background-image: url(_content/NBG.Visitor.Blazor/images/background.jpg); background-repeat: no-repeat;" @ref="carousel" AutoCycle="false" ShowArrows="false" ShowDelimiters="false" Swipe="false" TData="object">
        @if (!HideFirstPage)
        {
            <MudCarouselItem>
                <TerminalHome OnNext=@(() => carousel.Next()) />
            </MudCarouselItem>
        }
        <MudCarouselItem>
            <TerminalRegister @ref="form" OnBack=@(HideFirstPage ? null : carousel.Previous) OnNext=carousel.Next />
        </MudCarouselItem>
        <MudCarouselItem>
            <TerminalSafety OnBack=@(() => carousel.Previous()) OnRegister=Register/>
        </MudCarouselItem>
    </CustomMudCarousel>
</div>

@code {
    [CascadingParameter]
    public Localizer Loc { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string QRUrl { get; set; } = "https://fiss.dev.nbg.tech:44303/terminal/";

    [Parameter]
    public bool HideFirstPage { get; set; } = false;

    [Parameter]
    public Guid? PreregisteredVisitGuid { get; set; } = null;

    private MudCarousel<object> carousel;
    private TerminalRegister form;

    MudTheme NBG = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Red.Darken1,
            Secondary = Colors.Grey.Lighten2,
            SecondaryContrastText = Colors.Grey.Darken2,
            Error = Colors.Red.Darken3,
            Dark = Colors.Shades.Black
        }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (PreregisteredVisitGuid != null)
            {
                UseGuid(PreregisteredVisitGuid ?? default(Guid));
            }
        }
    }

    /// <summary>
    /// Loads the visit with the specified guid and fills
    /// the form with the information if the visit is pending or
    /// marks the visit as over if the visit is already active.
    /// </summary>
    /// <param name="guid"></param>
    public async Task UseGuid(Guid guid)
    {
        // If guid is valid
        if (guid != default(Guid))
        {
        // Load visit
            #if DEBUG
            VisitDto visit = new VisitDto() {Status = VisitStatusDto.VISIT_ACTIVE};
            #else
            VisitDto visit = await vs.ReadVisitByGuid(guid);
            #endif

            // If exists
            if (visit != null)
            {
                foreach (var p in visit.GetType().GetProperties())
                {
                    Console.Write(p.Name + ": ");
                    Console.WriteLine(p.GetValue(visit));
                }
                foreach (var p in visit.Visitor.GetType().GetProperties())
                {
                    Console.Write(p.Name + ": ");
                    Console.WriteLine(p.GetValue(visit.Visitor));
                }
                if (visit.Status == VisitStatusDto.VISIT_PENDING)
                {
                    // Needs to move first or form won't be loaded
                    carousel.MoveTo(HideFirstPage ? 0 : 1);
                    #if DEBUG
                    Console.WriteLine("Pending");
                    form.FormData.ContactPerson = "Loaded from DB";
                    #else
                    form.FormData = await vs.ReadRegisterFormDataByGuid(guid);
                    form.Valid = true;
                    #endif
                }
                else if (visit.Status == VisitStatusDto.VISIT_ACTIVE)
                {
                    #if DEBUG
                    Console.WriteLine("Active");
                    #endif
                    bool? result = await Dialog.ShowMessageBox(Loc["SignOut"], Loc["ConfirmSignOut"], Loc["Yes"], Loc["No"], options: new DialogOptions() {DisableBackdropClick = true, CloseButton = false});
                    if (result ?? false)
                    {
                        #if DEBUG
                        Console.WriteLine("Ended Visit");
                        #else
                        await vs.UpdateVisit(visit.Id, new() { Status = VisitStatusDto.VISIT_OVER });
                        #endif
                    }
                }
            }
            else
            {
                await Dialog.ShowMessageBox(Loc["InvalidQR"], null);
            }
        }
    }

    private async Task Register()
    {
        DateTime registeredAt = DateTime.Now;

        // Load data
        #if DEBUG
        Guid id = new("00000000-0000-0000-0000-000000000100");
        await Task.Delay(1000);
        #else
        Guid id = (await vs.AddVisit(registeredAt, form.FormData.FirstName, form.FormData.LastName, form.FormData.PhoneNumber, form.FormData.Email, form.FormData.Company, form.FormData.ContactPerson)).Guid;
        #endif

        // Generate qr code and pdf
        Bitmap qr = QRGenerator.GenerateQrCode(QRUrl + id.ToString());
        PdfDocument pdf = new TicketPdfGenerator(Loc).GetPdf(qr, id.ToString(), form.FormData.FullName, registeredAt);

        // Replace with print function
        pdf.Save("./ticket.pdf");

        // Reset form, scroll back to homepage and show popup
        form.Reset();
        carousel.MoveTo(0);
        #if DEBUG
        RenderFragment rf = 
            @<div>
                <img style="width: 100%" src="@($"data:image/png;base64,{Convert.ToBase64String(qr.ToBytes())}")"/>
                <a href=@(QRUrl + id.ToString())>Link</a>
            </div>
        ;
        await Dialog.Show<MudDialog>(Loc["RegisterSuccess"], new DialogParameters() {["DialogContent"] = rf}).Result;
        #else
        await Dialog.ShowMessageBox(Loc["RegisterSuccess"], null);
        #endif
    }
}
