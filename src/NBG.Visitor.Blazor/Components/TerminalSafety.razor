@using MudBlazor;
@using System.Reflection

<MudGrid Justify=Justify.Center Class="center" Style="height: 88%;" SelectedIndexChanged=StateHasChanged>
    <MudItem Style="height: 100%;" lg=9>
		<MudCarousel @ref="carousel" Style="height: 100%;" AutoCycle="false" TData="object" NextButtonTemplate=NextButton PreviousButtonTemplate=PreviousButton>
			@for(int p = 0; p < Pages; p++)
			{
				var localp = p;
				<MudCarouselItem>
					<MudGrid Style="height: 100%; padding: 1em;">
						@for (int i = itemsPerPage * localp; (i < itemsPerPage * localp + itemsPerPage) && i < safetyItems.Length; i++)
						{
							var locali = i;
							<MudItem xs="6">
								<MudPaper Elevation=5 Style="overflow: scroll; padding: 1em;">
									<div style="height: 10em; display: flex;">
										<img style="width: 10em; align-self: center" src="@(safetyItems[locali].ImagePath)"/>
										<div style="margin-left: 2em;">
											<MudText Style="text-decoration: underline;" Typo=Typo.h5>@safetyItems[locali].Title</MudText>
											<MudText>@safetyItems[locali].Text</MudText>
										</div>
									</div>
								</MudPaper>
							</MudItem>
						}
					</MudGrid>
				</MudCarouselItem>
			}
		</MudCarousel>
	</MudItem>
</MudGrid>

<footer class="footer">
	<MudGrid Justify=Justify.Center>
		<MudItem lg=2 Class="center">
			<MudButton Class="touchscreen-button" OnClick=Back Size=Size.Large Variant=Variant.Filled Color=Color.Secondary StartIcon=@Icons.Outlined.ArrowBack>@Loc["Back"]</MudButton>
		</MudItem>
		<MudItem lg=4 Class="center">
			<MudForm @ref="form">
				@if (carousel.SelectedIndex == Pages - 1)
				{
					<MudCheckBox @bind-Checked="accepted" Label=@Loc["SafetyInfoRead"] Required=true RequiredError=@Loc["SafetyInfoNotRead"]/>
				}
			</MudForm>
		</MudItem>
		<MudItem lg=2 Class="center">
			<MudButton Class="touchscreen-button" OnClick=NextOrRegister Size=Size.Large Variant=Variant.Filled Color=@(!LastPage ? Color.Secondary : Color.Success) EndIcon=@Icons.Outlined.Check Disabled=@(registering || LastPage && !accepted)>
				@if (registering)
				{
					<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
				}
				@(carousel.SelectedIndex < Pages - 1 ? Loc["Next"] : Loc["FinishRegister"])
			</MudButton>
		</MudItem>
	</MudGrid>
</footer>

@code {
	[CascadingParameter]
	public Localizer Loc { get; set; }

	[Parameter]
	public EventCallback OnRegister { get; set; }
	[Parameter]
	public EventCallback OnBack { get; set; }

	private MudCarousel<object> carousel;

	private SafetyItem[] safetyItems => SafetyItem.LoadFromResource(Assembly.GetEntryAssembly(), Loc.Culture).ToArray();
	private int itemsPerPage = 8;
	private int Pages
	{
		get
		{
			return (int)Math.Ceiling((double)safetyItems.Length / (double)itemsPerPage);
		}
	}
	private bool LastPage
	{
		get
		{
			return !(carousel.SelectedIndex < Pages - 1);
		}
	}

	private MudForm form;
	private bool accepted;
	private bool registering = false;

	private RenderFragment PreviousButton
	{
		get
		{
			return @<button @onclick=HandlePreviousClick @onclick:stopPropagation=true><MudIcon Icon=@Icons.Outlined.ArrowBackIos /></button>
	;
		}
	}
	private void HandlePreviousClick(MouseEventArgs e) => PrevousPage();
	private RenderFragment NextButton
	{
		get
		{
			return @<button @onclick=HandleNextClick @onclick:stopPropagation=true><MudIcon Icon=@Icons.Outlined.ArrowForwardIos /></button>
	;
		}
	}
	private void HandleNextClick(MouseEventArgs e) => NextPage();

	/// <summary>
	/// Goes back one page in the safetyitems-carousel.
	/// </summary>
	/// <returns>True if reached beginning.</returns>
	private bool PrevousPage()
	{
		if (carousel.SelectedIndex > 0)
		{
			carousel.Previous();
			return false;
		}
		else
			return true;
	}

	/// <summary>
	/// Goes forward one page in the safetyitems-carousel.
	/// </summary>
	/// <returns>True if reached end.</returns>
	private bool NextPage()
	{
		if (!LastPage)
		{
			carousel.Next();
			return false;
		}
		else
			return true;
	}

	private async Task Back()
	{
		if (PrevousPage())
			await OnBack.InvokeAsync();
	}

	private async Task NextOrRegister()
	{
		registering = true;
		if (NextPage())
		{
			await form.Validate();
			if (accepted)
			{
				await OnRegister.InvokeAsync();
			}
		}
		registering = false;
	}
}
