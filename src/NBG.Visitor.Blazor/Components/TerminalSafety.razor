@using MudBlazor;
@using System.Reflection

<MudGrid Style="margin: 2em; height: 100%;" Justify=Justify.Center>
    <MudItem Style="height: 100%;" lg=8>
		<MudCarousel @ref="carousel" Style="height: 85%;" AutoCycle="false" ShowArrows="false" TData="object">
			@for(int p = 0; p < Pages; p++)
			{
				var localp = p;
				<MudCarouselItem>
					<MudGrid Style="height: 100%;">
						@for (int i = itemsPerPage * localp; (i < itemsPerPage * localp + itemsPerPage) && i < safetyItems.Length; i++)
						{
							var locali = i;
							<MudItem xs="6">
								<MudPaper Style="height: 10em; overflow: scroll;">
									<div style="display: inline-flex; vertical-align: middle; width: 10em; height: 100%">
										<img style="width: 100%" src="@(safetyItems[locali].ImagePath)"/>
									</div>
									<div style="display: inline-block; vertical-align: top;">
										<MudText Typo=Typo.h4>@safetyItems[locali].Title</MudText>
										<MudText>@safetyItems[locali].Text</MudText>
									</div>
								</MudPaper>
							</MudItem>
						}
					</MudGrid>
				</MudCarouselItem>
			}
		</MudCarousel>
	</MudItem>
</MudGrid>

<footer class="footer">
	<MudGrid Justify=Justify.Center>
		<MudItem lg=8>
			<MudGrid Justify=Justify.Center>
				<MudItem lg=3>
					<MudButton OnClick=Back Variant=Variant.Filled Color=@Color.Secondary StartIcon=@Icons.Outlined.ArrowBack>@Loc["Back"]</MudButton>
				</MudItem>
				<MudItem lg=6>
					<MudForm @ref="form">
						<MudCheckBox @bind-Checked="accepted" Label=@Loc["SafetyInfoRead"] Required=true RequiredError=@Loc["SafetyInfoNotRead"]/>
					</MudForm>
				</MudItem>
				<MudItem lg=3>
					<MudButton OnClick=Register Variant=Variant.Filled Color=@Color.Secondary EndIcon=@Icons.Outlined.Check>@(carousel.SelectedIndex < Pages - 1 ? Loc["Next"] : Loc["FinishRegister"])</MudButton>
				</MudItem>
			</MudGrid>
		</MudItem>
	</MudGrid>
</footer>

@code {
	[CascadingParameter]
	public Localizer Loc { get; set; }

	[Parameter]
	public EventCallback<RegisteredEventArgs> OnRegister { get; set; }
	[Parameter]
	public EventCallback OnBack { get; set; }

	private MudCarousel<object> carousel;

	private SafetyItem[] safetyItems => SafetyItem.LoadFromResource(Assembly.GetExecutingAssembly(), Loc.Culture).ToArray();
	private int itemsPerPage = 10;
	private int Pages
	{
		get
		{
			return (int)Math.Ceiling((double)safetyItems.Length / (double)itemsPerPage);
		}
	}

	private MudForm form;
	private bool accepted;

	private async void Back()
	{
		if (carousel.SelectedIndex > 0)
			carousel.Previous();
		else
			await OnBack.InvokeAsync();
	}

	private async void Register()
	{
		form.ResetValidation();
		if (carousel.SelectedIndex < Pages - 1)
			carousel.Next();
		else
		{
			await form.Validate();
			if (accepted)
			{
				await OnRegister.InvokeAsync(new RegisteredEventArgs(Loc["RegisterSuccess"]));
			}
		}
	}
}
