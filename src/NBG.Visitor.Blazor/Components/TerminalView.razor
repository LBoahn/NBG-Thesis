@using MudBlazor;
@using NBG.Visitor.Blazor.Components.Dialogs
@using NBG.Visitor.Blazor.Components.TerminalSubComponents
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Domain;
@using System.Reflection
@using PdfSharp.Pdf
@using QRCoder
@using System.Drawing
@using System.Net
@using System.IO

@inject IDialogService Dialog;
@inject IVisitService vs;

<link href="_content/NBG.Visitor.Blazor/css/site.css" rel="stylesheet"/>

<MudThemeProvider Theme="NBG"/>

<div style=@Style>
    <CustomMudCarousel Style="height: 100%; background-image: url(_content/NBG.Visitor.Blazor/images/background.jpg); background-repeat: no-repeat;" @ref="carousel" AutoCycle="false" ShowArrows="false" ShowDelimiters="false" Swipe="false" TData="object" SelectedIndex=@(HideFirstPage ? 1 : 0)>
        <MudCarouselItem>
            <TerminalHome OnNext=carousel.Next />
        </MudCarouselItem>
        <MudCarouselItem>
            <TerminalRegister @ref="form" OnBack=carousel.Previous OnNext=carousel.Next />
        </MudCarouselItem>
        <MudCarouselItem>
            <TerminalSafety OnBack=carousel.Previous OnRegister=Register />
        </MudCarouselItem>
    </CustomMudCarousel>
</div>

<MudMessageBox @ref="qrFailedBox">
    <TitleContent>
        <MudText Typo=Typo.h4 Class="ma-4">@Loc["InvalidQR"]</MudText>
    </TitleContent>
    <YesButton>
        <MudButton Class="touchscreen-button" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">OK</MudButton>
    </YesButton>
</MudMessageBox>

<MudMessageBox @ref="registerBox">
    <TitleContent>
        <MudText Typo=Typo.h4 Class="ma-4">@Loc["RegisterSuccess"]</MudText>
    </TitleContent>
    <YesButton>
        <MudButton Class="touchscreen-button" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">OK</MudButton>
    </YesButton>
</MudMessageBox>

<MudMessageBox @ref="confirmSignoutBox">
    <TitleContent>
        <MudText Typo=Typo.h4>@Loc["SignOut"]</MudText>
    </TitleContent>
    <MessageContent>
        <MudText Typo=Typo.h6 Class="ma-4">@Loc["ConfirmSignOut"]</MudText>
    </MessageContent>
    <NoButton>
        <MudButton Class="touchscreen-button" Variant="Variant.Filled" Color="MudBlazor.Color.Secondary">@Loc["No"]</MudButton>
    </NoButton>
    <YesButton>
        <MudButton Class="touchscreen-button" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" EndIcon="@Icons.Material.Filled.Logout">@Loc["Yes"]</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [CascadingParameter]
    public Localizer Loc { get; set; }

    [Parameter]
    public string Style { get; set; }

    /// <summary>
    /// The url to the terminal which the QR code will contain.
    /// </summary>
    /// <remarks>The culture and guid will be appended like: <code>QRUrl + "de-DE/b4f88443-2b8e-4308-be2d-e5e274b59a7e"</code></remarks>
    [Parameter]
    public string QRUrl { get; set; } = "https://fiss.dev.nbg.tech:44303/terminal/";

    /// <summary>
    /// Skips directly to the second page.
    /// </summary>
    [Parameter]
    public bool HideFirstPage { get; set; } = false;

    [Parameter]
    public Guid? PreregisteredVisitGuid { get; set; } = null;

    /// <summary>
    /// Utilizes alternative methods that can be used in a Blazor Webassembly app.
    /// </summary>
    [Parameter]
    public bool UseWASMMethods { get; set; } = false;

    private MudCarousel<object> carousel;
    private TerminalRegister form;

    private MudMessageBox registerBox;
    private MudMessageBox confirmSignoutBox;
    private MudMessageBox qrFailedBox;

    MudTheme NBG = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Red.Darken1,
            Secondary = Colors.Grey.Lighten2,
            SecondaryContrastText = Colors.Grey.Darken2,
            Error = Colors.Red.Darken3,
            Dark = Colors.Shades.Black
        }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (PreregisteredVisitGuid != null)
            {
                UseGuid(PreregisteredVisitGuid ?? default(Guid));
            }
        }
    }

    /// <summary>
    /// Loads the visit with the specified guid and fills
    /// the form with the information if the visit is pending or
    /// marks the visit as over if the visit is already active.
    /// </summary>
    /// <param name="guid"></param>
    public async Task UseGuid(Guid guid)
    {
        // If guid is valid
        if (guid != default(Guid))
        {
            // Load visit
            VisitDto visit = await vs.ReadVisitByGuid(guid);

            // If exists
            if (visit != null)
            {
                if (visit.Status == VisitStatusDto.VISIT_PENDING)
                {
                    await LoadFormData(guid);
                }
                else if (visit.Status == VisitStatusDto.VISIT_ACTIVE)
                {
                    await SignOutUser(guid, visit.Id);
                }
                else
                {
                    await qrFailedBox.Show();
                }
            }
            else
            {
                await qrFailedBox.Show();
            }
        }
    }

    /// <summary>
    /// Load the form data of an visit.
    /// </summary>
    /// <param name="guid">The Guid of the visit.</param>
    public async Task LoadFormData(Guid guid)
    {
        // Needs to move first or form won't be loaded
        if (!HideFirstPage)
            carousel.MoveTo(1);

        form.FormData = await vs.ReadRegisterFormDataByGuid(guid);
        form.Valid = true;
        await form.Validate();
    }

    /// <summary>
    /// Load the form data of an visit.
    /// </summary>
    /// <param name="guid">The Guid of the visit.</param>
    public async Task SignOutUser(Guid guid, int visitId = -1)
    {
    #if DEBUG
        Console.WriteLine("Active");
    #endif
        bool? result = await confirmSignoutBox.Show(new() {DisableBackdropClick = true, CloseButton = false});
        if (result ?? false)
        {
        #if DEBUG
            Console.WriteLine("Ended Visit");
        #else
            await vs.UpdateVisit((visitId < 0) ? (await vs.ReadVisitByGuid(guid)).Id : visitId, new() { Status = VisitStatusDto.VISIT_OVER });
        #endif
        }
    }

    private async Task Register()
    {
        HideFirstPage = false;
        DateTime registeredAt = DateTime.Now;

        // Send data
    #if DEBUG
        //Use dummy data
        Guid guid = PreregisteredVisitGuid ?? new("00000000-0000-0000-0000-000000000100");
        await Task.Delay(1000);
    #else
        // Add visit or update to status active with user verified data
        Guid guid = PreregisteredVisitGuid ?? (await vs.AddVisit(registeredAt, form.FormData.FirstName, form.FormData.LastName, form.FormData.PhoneNumber, form.FormData.Email, form.FormData.Company, form.FormData.ContactPerson)).Guid;
        if (PreregisteredVisitGuid.HasValue)
        {
            int id = (await vs.ReadVisitByGuid(guid)).Id;
            await vs.UpdateVisit(id, registeredAt, null, VisitStatusDto.VISIT_ACTIVE, form.FormData.ContactPerson, form.FormData.Company, form.FormData.FirstName, form.FormData.LastName, form.FormData.PhoneNumber, form.FormData.Email);
        }
    #endif

        // Check url for trailing slash
        if (QRUrl.Last() != '/')
            QRUrl += '/';

        // Generate qr code and pdf
        MemoryStream qr = QRGenerator.GenerateQrCode($"{QRUrl}{Loc.Culture.Name}/{guid}", UseWASMMethods);
        //PdfDocument pdf = new TicketPdfGenerator(Loc).GetPdf(qr, guid.ToString(), form.FormData.FullName, registeredAt);

        // Replace with print function
        //pdf.Save("./ticket.pdf");

        // Reset form, scroll back to homepage and show popup
        form.Reset();
        carousel.MoveTo(0);
    #if DEBUG
        RenderFragment rf = 
            @<div>
                <img style="width: 100%" src="@($"data:image/png;base64,{Convert.ToBase64String(qr.ToArray())}")"/>
                <a href=@($"{QRUrl}{Loc.Culture.Name}/{guid}")>Link</a>
            </div>
        ;
        registerBox.MessageContent = rf;
        await registerBox.Show();
    #else
        await registerBox.Show();
    #endif
    }
}
