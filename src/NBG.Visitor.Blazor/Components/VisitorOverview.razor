@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.JSInterop
@using MudBlazor;
@using NBG.Visitor.Domain;
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Blazor.Components.Dialogs;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;

@inject IJSRuntime JS;
@inject IVisitService DataRepository;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<MudTable Items=@Visits Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Elevation="0" Class="ml-0 mr-0" Filter="new Func<VisitDto,bool>(FilterFunc)" Loading="@_loading" FixedFooter="@fixedFooter" FixedHeader="@fixedHeader" Height="77vh">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Style="padding-left:59px;">Visits</MudText>
        <MudSpacer />
        <!--<div id = "filterOptions">
            <span>Filter: </span>
            <MudToggleIconButton  Color="Color.Success"  Size=Size.Small @bind-Toggle=@(filterActive)></MudToggleIconButton > 
            <MudToggleIconButton  Color="Color.Warning"  Size=Size.Small @bind-Toggle=@(filterPending)></MudToggleIconButton >
            <MudToggleIconButton  Color="Color.Error"    Size=Size.Small @bind-Toggle=@(filterOver)></MudToggleIconButton >
        </div>-->
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Style="padding-left:100px;"><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh>Phone Number</MudTh>
        <MudTh>Email</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Company.CompanyLabel)">Company</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.ContactPerson.Name)">Contact Person</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<VisitDto, object>(x=>x.VisitStart)">Start</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.VisitEnd)">End</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh Style="padding-right:100px;"><MudIconButton Icon="@Icons.Filled.Add" OnClick="AddVisit"></MudIconButton></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="padding-left:100px;">@context.Visitor.FirstName</MudTd>
        <MudTd>@context.Visitor.LastName</MudTd>
        <MudTd>@context.Visitor.PhoneNumber</MudTd>
        <MudTd>@context.Visitor.Email</MudTd>
        <MudTd>@context.Company.CompanyLabel</MudTd>
        <MudTd>@context.ContactPerson.Name</MudTd>
        <MudTd>@context.VisitStart</MudTd>
        <MudTd>@context.VisitEnd</MudTd>

        <MudTd Class = "status" Style = "padding-top:0px;padding-bottom:0px;">
            @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
            {
                //<MudChip Color="Color.Success">@context.Status</MudChip>
                //<div><MudText Color="Color.Success">@context.Status</MudText></div>
                <MudChip Color="Color.Success" Size=Size.Small>Visit Active</MudChip> 
            }
            else if(@context.Status == VisitStatusDto.VISIT_OVER){
                //<div><MudText Color="Color.Error">@context.Status</MudText></div>
                <MudChip Color="Color.Error" Size=Size.Small>Visit Over</MudChip>
            }
            else{
                //<div><MudText Color="Color.Warning">@context.Status</MudText></div>
                <MudChip Color="Color.Warning" Size=Size.Small>Visit Pending</MudChip>
            }
        </MudTd>

        <MudTd Style = "padding-top:5px;padding-bottom:5px;">
            @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
            {
                <MudFab OnClick=@(()=>SignOffVisit(@context)) Size=Size.Small DisableElevation=true Icon=@Icons.Filled.Logout></MudFab>
            }
        </MudTd>

        <MudTd Style = "padding-top:5px;padding-bottom:5px;padding-right:100px;">
            <MudMenu Icon="@Icons.Filled.MoreVert">
                    <MudMenuItem OnClick=@(()=>EditVisit(@context))><MudText Style="font-size:15px;">Edit</MudText></MudMenuItem>
                    <MudMenuItem OnClick=@(()=>DeleteVisit(@context)) Style="color:red;"><MudText Style="font-size:15px;">Delete</MudText></MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions"/>
    </PagerContent>
</MudTable>

@code {
    bool _loading = true;

    private string searchString = "";
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixedHeader = true;
    private bool fixedFooter = true;
    private int[] pageSizeOptions = new int[] { 10, 25, 50, 100 };

    //public bool filterActive { get; set; }
    //public bool filterPending { get; set; }
    //public bool filterOver { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var visits = await DataRepository.ReadAllVisits();
        foreach(var visit in visits){
            Visits.Add(visit);
        }
        _loading = false;
    }

    public async Task SignOffVisit(VisitDto visit)
    {
        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to manually sign off this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Sign Off");
        parameters.Add("Color", Color.Warning);

        var dialog = DialogService.Show<Dialog>("Sign Off Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            visit.VisitEnd = DateTime.Now;
            visit.Status = VisitStatusDto.VISIT_OVER;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??DateTime.Now, visit.Status, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);

            await JS.InvokeVoidAsync("console.log","Visitor signed off.");
        }
    }

    public async Task DeleteVisit(VisitDto visit)
    {
        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to delete this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<Dialog>("Delete Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DataRepository.RemoveVisit(visit.Id);
            Visits.Remove(visit);

            await JS.InvokeVoidAsync("console.log","Visit deleted.");
        }
    }

    public async Task EditVisit(VisitDto _visit)
    {
        var parameters = new DialogParameters { ["visit"]=_visit };

        var dialog = DialogService.Show<EditDialog>("Edit Visit", parameters);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??null, visit.Status, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);
            Snackbar.Add("Changes Saved", Severity.Success);

            await JS.InvokeVoidAsync("console.log","Visit updated.");
            //await JS.InvokeVoidAsync("console.log", $"{visit.Id.ToString()}\n{visit.VisitStart}\n{visit.VisitEnd}\n{visit.Status}\n{visit.ContactPerson.Name}\n{visit.Company.CompanyLabel}\n{visit.Visitor.FirstName}\n{visit.Visitor.LastName}\n{visit.Visitor.PhoneNumber}\n{visit.Visitor.Email}");
        }
    }

    public async Task AddVisit()
    {
        VisitDto _visit = new VisitDto();
        _visit.Visitor = new VisitorDto();
        _visit.Company = new CompanyDto();
        _visit.ContactPerson = new ContactPersonDto();
        _visit.Status = new VisitStatusDto();
        var parameters = new DialogParameters { ["visit"] = _visit };

        var dialog = DialogService.Show<EditDialog>("Add Visit", parameters);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            await DataRepository.AddVisit(visit.VisitStart??null, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email??null);
            Snackbar.Add("Visit Added", Severity.Success);

            Visits.Add(visit);
            await JS.InvokeVoidAsync("console.log","Added visit.");
            //await JS.InvokeVoidAsync("console.log", $"{visit.Id.ToString()}\n{visit.VisitStart}\n{visit.VisitEnd}\n{visit.Status}\n{visit.ContactPerson.Name}\n{visit.Company.CompanyLabel}\n{visit.Visitor.FirstName}\n{visit.Visitor.LastName}\n{visit.Visitor.PhoneNumber}\n{visit.Visitor.Email}");
        }
    }

    private bool FilterFunc(VisitDto visit)
    {
        /*
        if(filterActive == true)
        {
            if (visit.Status == VisitStatusDto.VISIT_ACTIVE.ToString())
                return true;
        }
        if(filterPending == true)
        {
            if (visit.Status == VisitStatusDto.VISIT_PENDING.ToString())
                return true;
        }
        if(filterOver == true)
        {
            if (visit.Status == VisitStatusDto.VISIT_OVER.ToString())
                return true;
        }*/
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (visit.Visitor.FirstName.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Visitor.LastName.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.Visitor.Email != null)
            if (visit.Visitor.Email.ToLower().Contains(searchString.ToLower()))
                return true;
        if (visit.Visitor.PhoneNumber.ToLower().Contains(searchString.ToLower()))
            return true;
        if (visit.ContactPerson.Name != null)
            if (visit.ContactPerson.Name.ToLower().Contains(searchString.ToLower()))
                return true;
        if (visit.Company.CompanyLabel != null)
            if (visit.Company.CompanyLabel.ToLower().Contains(searchString.ToLower()))
                return true;
        return false;
    }

    private List<VisitDto> Visits = new List<VisitDto>();
}