@using MudBlazor;
@using NBG.Visitor.Blazor.Components.Dialogs
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Domain;
@using System.Reflection
@using PdfSharp.Pdf
@using QRCoder
@using System.Drawing
@using System.Net

@inject IDialogService Dialog;
@inject IVisitService vs;

<link href="_content/NBG.Visitor.Blazor/css/site.css" rel="stylesheet"/>

<MudThemeProvider Theme="NBG"/>


<MudCarousel Style="height: 100vh;" @ref="carousel" AutoCycle="false" ShowArrows="false" ShowDelimiters="false" TData="object">
    <MudCarouselItem>
        <TerminalHome OnNext=@(() => carousel.Next()) />
    </MudCarouselItem>
    <MudCarouselItem>
        <TerminalRegister @ref="form" OnBack=@(() => carousel.Previous()) OnNext=@(() => carousel.Next()) />
    </MudCarouselItem>
    <MudCarouselItem>
        <TerminalSafety OnBack=@(() => carousel.Previous()) OnRegister=Register/>
    </MudCarouselItem>
</MudCarousel>

@code {
    [CascadingParameter]
    public Localizer Loc { get; set; }
    private MudCarousel<object> carousel;
    private TerminalRegister form;

    MudTheme NBG = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Red.Darken1,
            Secondary = Colors.Grey.Lighten2,
            SecondaryContrastText = Colors.Grey.Darken2
        }
    };

    private async Task Register()
    {
        DateTime registeredAt = DateTime.Now;

        #if DEBUG
    Guid id = new("00000000-0000-0000-0000-000000000100");
    await Task.Delay(1000);
        #else
        Guid id = (await vs.AddVisit(registeredAt, form.FormData.FirstName, form.FormData.LastName, form.FormData.PhoneNumber, form.FormData.Email, form.FormData.Company, form.FormData.ContactPerson)).Guid;
#endif

        Bitmap qr = PdfExporter.GenerateQrCode(id);

        PdfDocument pdf = new TicketPdfGenerator(Loc.Culture).GetPdf(qr, id.ToString(), form.FormData.FullName, registeredAt);
        pdf.Save("./pdf.pdf");

        form.Reset();
        carousel.MoveTo(0);

        #if DEBUG
        RenderFragment rf = 
            @<img style="width: 100%" src="@($"data:image/png;base64,{Convert.ToBase64String(qr.ToBytes())}")"/>
        ;
        await Dialog.Show<MudDialog>(Loc["RegisterSuccess"], new DialogParameters() {["DialogContent"] = rf}).Result;
        #else
        await Dialog.ShowMessageBox(Loc["RegisterSuccess"], null);
        #endif
    }

    private Bitmap BitmapFromUrl(string url)
    {
        HttpWebRequest request = WebRequest.CreateHttp(url);
        request.ServerCertificateValidationCallback += (sender, certificate, chain, sslPolicyErrors) => true;
        using (var response = request.GetResponse())
        {
            using (var stream = response.GetResponseStream())
            {
                return (Bitmap)Bitmap.FromStream(stream);
            }
        }
    }
}
