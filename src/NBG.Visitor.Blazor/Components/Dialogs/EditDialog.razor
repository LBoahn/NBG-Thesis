@using Microsoft.JSInterop
@using NBG.Visitor.Domain.Dtos;
@using MudBlazor;
@using Radzen.Blazor;
@using System.Reflection
@inject IJSRuntime JS;

<style>
    .timePickerToolbar{
        width:100%;

    }
</style>


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if(mode == "Add")
            {
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-3 mb-n1"/>
                @Loc["AddVisit"]
            }
            else if (mode == "Edit")
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
                @Loc["EditVisit"]
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@visit.Visitor.FirstName" Label=@Loc["FirstName"]/>
        <MudTextField @bind-Value="@visit.Visitor.LastName" Label=@Loc["LastName"]/>
        <MudTextField @bind-Value="@visit.Visitor.PhoneNumber" Label=@Loc["PhoneNr"]/>
        <MudTextField @bind-Value="@visit.Visitor.Email" Label=@Loc["Email"]/>
        <MudTextField @bind-Value="@visit.Company.CompanyLabel" Label=@Loc["Company"]/>
        <MudTextField @bind-Value="@visit.ContactPerson.Name" Label=@Loc["ContactPerson"]/>
        <div class="datetimecontainer">
            <MudDatePicker Label=@Loc["StartDate"] @bind-Date="@startDate" DateFormat="@Loc["DateFormat"]" Style="width:90%;" DisableToolbar="true"/>
            <MudTimePicker Label=@Loc["StartTime"] @bind-Time="@startTime" TimeFormat="@Loc["TimeFormat"]" AmPm="@((Loc.Culture.ToString() == "en-US")? true : false )"/>
        </div>
        @if(mode == "Edit")
        {
            <div class="datetimecontainer">
                <MudDatePicker Label=@Loc["EndDate"] @bind-Date="@endDate" DateFormat="@Loc["DateFormat"]" Style="width:90%;" DisableToolbar="true"/>    
                <MudTimePicker Label=@Loc["EndTime"] @bind-Time="@endTime" TimeFormat="@Loc["TimeFormat"]" AmPm="@((Loc.Culture.ToString() == "en-US")? true : false )"/>
            </div>
        }
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Loc["Cancel"]</MudButton>
        <MudButton Color="Color.Error" OnClick="EditVisit">@Loc["Save"]</MudButton>
    </DialogActions>
</MudDialog>
 
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public VisitDto visit { get; set; } = new VisitDto();
    [Parameter] public string mode { get; set; }
    [Parameter] public Localizer Loc { get; set; }

    private DateTime? startDate { get; set; }
    private TimeSpan? startTime { get; set; }
    private DateTime? endDate { get; set; }
    private TimeSpan? endTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        startDate = @visit.VisitStart ?? null;
        endDate = @visit.VisitEnd ?? null;
        if (@visit.VisitStart != null)
            startTime = @visit.VisitStart.Value.TimeOfDay;
        else
            startTime = null;
        if (@visit.VisitEnd != null)
            endTime = @visit.VisitEnd.Value.TimeOfDay;
        else
            endTime = null;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void EditVisit()
    {
        if (startTime != null)
        {
            startDate -= startDate.Value.TimeOfDay;
            startDate += startTime;
        }
        else if (startDate != null)
        {
            startDate -= startDate.Value.TimeOfDay;
            startDate += new TimeSpan(12, 0, 0);
        }

        if (endTime != null)
        {
            endDate -= endDate.Value.TimeOfDay;
            endDate += endTime;
        }
        else if (endDate != null)
        {
            endDate -= endDate.Value.TimeOfDay;
            endDate += new TimeSpan(12, 0, 0);
        }
        

        visit.VisitStart = startDate??null;
        visit.VisitEnd = endDate??null;
        MudDialog.Close(DialogResult.Ok(visit));
    }
}

