@using AutoMapper
@using MudBlazor;
@using NBG.Visitor.Blazor.Dtos
@using NBG.Visitor;
@using NBG.Visitor.Services.DB;
@using NBG.Visitor.Blazor.Mapping;

@if (!isLoaded)
{
    <p><em>Loading Visitors...</em></p>
}
else
{
    <MudTable style="height:100%" Items=@Visits Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Elevation=1 Class="ml-0 mr-0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Visits</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Start</MudTh>
            <MudTh>End</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.FirstName)">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.LastName)">Last Name</MudTableSortLabel></MudTh>
            <MudTh>Contact Person</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone Number</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Company.CompanyLabel)">Company</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<VisitDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.VisitStart</MudTd>
            <MudTd>@context.VisitEnd</MudTd>
            <MudTd>@context.Visitor.FirstName</MudTd>
            <MudTd>@context.Visitor.LastName</MudTd>
            <MudTd>@context.ContactPerson.Name</MudTd>
            <MudTd>@context.Visitor.Email</MudTd>
            <MudTd>@context.Visitor.PhoneNumber</MudTd>
            <MudTd>@context.Company.CompanyLabel</MudTd>
            <MudTd>
                @context.Status
                @if (@context.Status == VisitStatusDto.VISIT_ACTIVE.ToString())
                {
                    <MudFab OnClick=@(()=>SignOff(@context)) Size=Size.Small Class="ml-5" DisableElevation=true Icon=@Icons.Filled.Logout></MudFab>
                }
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}

@code {
    bool isLoaded;
    private string searchString = "";
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private int[] pageSizeOptions = new int[] { 11 };

    protected override async Task OnInitializedAsync()
    {
        var config = new AutoMapperConfiguration().Configure();
        var mapper = config.CreateMapper();
        var visits = await _repo.ReadAllVisits();
        foreach(var visit in visits){
            Visits.Add(mapper.Map<VisitDto>(visit));
        }
        isLoaded = true;
    }

    public async Task SignOff(VisitDto visit)
    {
        var config = new AutoMapperConfiguration().Configure();
        var mapper = config.CreateMapper();

        visit.VisitEnd = DateTime.Now;
        visit.Status = VisitStatusDto.VISIT_OVER.ToString();
        await _repo.UpdateVisit(mapper.Map<Storage.Models.Visit>(visit));
    }

    private List<VisitDto> Visits = new List<VisitDto>();
    private VisitRepository _repo = new VisitRepository();
}