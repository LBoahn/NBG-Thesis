@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.JSInterop
@using MudBlazor;
@using NBG.Visitor.Domain;
@using NBG.Visitor.Domain.Dtos;
@using NBG.Visitor.Blazor.Components.Dialogs;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;

@inject IJSRuntime JS;
@inject IVisitService DataRepository;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<style>
    /*Row Options Menu on Hover*/
    .optionsMenu
    {
        visibility: hidden;
    }

    tr:hover .optionsMenu
    {
        visibility: visible;
    }
    
    /*Hide Table Scrollbar and Table Spacing*/
    .mud-table-container {
        margin-top:20px !important;
        -ms-overflow-style: none;  /* Internet Explorer 10+ */
        scrollbar-width: none;  /* Firefox */
    }

    .mud-table-container::-webkit-scrollbar { 
        display: none;  /* Safari and Chrome */
    }

    /*Table Buttons Formatting*/
    .visitorOverviewBtn, .optionsMenu button{
        width:40px;
        height:40px;
    }

    .optionsMenu, #addButtonToolTip div{
        border-radius:100%;
    }

    .visitorOverviewBtn:not(#addVisitBtn):not(:hover), .optionsMenu:not(:hover){
        background-color:#f0f0f0;
    }

    .visitorOverviewBtn:not(#addVisitBtn):hover, .optionsMenu:hover{
        background-color:#e1e1e1;
    }
    
    /*Add Visit Button Formatting*/
    #addButtonToolTip div button{
        width:40px;
        height:40px;
        border-width:2px;
        border-style:solid;
        border-color:#d32f2f;
        background-color:#ffeeed;
        color:#d32f2f;
    }

    #addButtonToolTip div button:hover{
        background-color:#d32f2f !important;
        color:white !important;
    }

    .visitStatusChip{
        margin-left:0;
    }
</style>
@*Function/MostImportant Class ID Style Icon Color Elevation Dense *@
<MudTable Items=@Visits Class="ml-8 mr-8 mt-8 rounded-lg visitTable" Elevation="5" Height="75vh" RowStyle="height:60px !important;" Filter="new Func<VisitDto,bool>(FilterFunc)" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Loading="@_loading" FixedFooter="@fixedFooter" FixedHeader="@fixedHeader"> 
    <ColGroup>
        <col style="width: 9%;"/>
        <col style="width: 9%;"/>
        <col style="width: 10%;"/>
        <col style="width: 15%;"/>
        <col style="width: 10%;"/>
        <col style="width: 10%;"/>
        <col style="width: 14%;"/>
        <col style="width: 14%;"/>
        <col style="width: 3%;"/>
        <col style="width: 3%;"/>
        <col style="width: 3%;"/>
    </ColGroup>
    <ToolBarContent>
        <MudCard Class="pl-4 mt-8" Elevation="0">
            <MudText Class="mb-2" Typo="Typo.h5">Visits</MudText>
            <MudText>People who have visited in the past 14 days</MudText>
        </MudCard>

        <MudSpacer/>

        <MudForm Class="mt-7 mr-11">
            <MudRadioGroup @bind-SelectedOption="@ActiveFilter">
                <MudRadio Option="@(VisitStatusDto.VISIT_ACTIVE)" Color="Color.Success" T="VisitStatusDto?">Active</MudRadio>
                <MudRadio Option="@(VisitStatusDto.VISIT_PENDING)" Color="Color.Warning" T="VisitStatusDto?">Pending</MudRadio>
                <MudRadio Option="@(VisitStatusDto.VISIT_OVER)" Color="Color.Error" T="VisitStatusDto?">Over</MudRadio>
            </MudRadioGroup>
        </MudForm>

        <MudTextField @bind-Value="searchString" Class="mt-3 mr-11" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudIconButton OnClick="ResetFilters" Class="mt-7 mr-8 visitorOverviewBtn" Style=@resetFilterBtnStyle Icon="@Icons.Filled.Close"></MudIconButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh Class="pl-10"><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Visitor.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh>Phone Number</MudTh>
        <MudTh>Email</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Company.CompanyLabel)">Company</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.ContactPerson.Name)">Contact Person</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<VisitDto, object>(x=>x.VisitStart)">Start</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.VisitEnd)">End</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VisitDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh Class="pr-10">
            <MudTooltip Text="Add Visit" id="addButtonToolTip">
                <MudIconButton OnClick="AddVisit" Class="visitorOverviewBtn" id="addVisitBtn" Icon="@Icons.Filled.Add"></MudIconButton>
            </MudTooltip>   
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="pl-10 mt-10">@context.Visitor.FirstName</MudTd>
        <MudTd>@context.Visitor.LastName</MudTd>
        <MudTd>@context.Visitor.PhoneNumber</MudTd>
        <MudTd>@context.Visitor.Email</MudTd>
        <MudTd>@context.Company.CompanyLabel</MudTd>
        <MudTd>@context.ContactPerson.Name</MudTd>
        <MudTd>@context.VisitStart</MudTd>
        <MudTd>@context.VisitEnd</MudTd>

        <MudTd Class="status pt-0 pb-0">
            @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
            {
                <MudChip Class="visitStatusChip" Color="Color.Success" Size=Size.Small>Visit Active</MudChip> 
            }
            else if(@context.Status == VisitStatusDto.VISIT_OVER){
                <MudChip Class="visitStatusChip" Color="Color.Error" Size=Size.Small>Visit Over</MudChip>
            }
            else{
                <MudChip Class="visitStatusChip" Color="Color.Warning" Size=Size.Small>Visit Pending</MudChip>
            }
        </MudTd>

        <MudTd Class = "pt-1 pb-1">
            @if (@context.Status == VisitStatusDto.VISIT_ACTIVE)
            {
                <MudIconButton OnClick=@(()=>SignOffVisit(@context)) Class="visitorOverviewBtn" Icon=@Icons.Filled.Logout></MudIconButton>
            }
        </MudTd>

        <MudTd Class="pr-10 pt-1 pb-1">
            <MudMenu @onclick="OpenMenu" Class="optionsMenu" Icon="@Icons.Filled.MoreVert" Dense=true>
                <MudMenuItem OnClick=@(()=>EditVisit(@context))><MudText Style="font-size:15px;">Edit</MudText></MudMenuItem>
                <MudMenuItem OnClick=@(()=>DeleteVisit(@context)) Style="@($"color:{Colors.Red.Default};")"><MudText Style="font-size:15px;">Delete</MudText></MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="@pageSizeOptions"/>
    </PagerContent>
</MudTable>

@code {
    private List<VisitDto> Visits = new List<VisitDto>();

    // MudTable configuration
    bool _loading = true;
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private bool fixedHeader = true;
    private bool fixedFooter = true;
    private int[] pageSizeOptions = new int[] { 10, 25, 50, 100 };
    private string resetFilterBtnStyle { get; set; } = "visibility:hidden;";

    // Dialog configuration
    private DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
    private bool menuOpen { get; set; } = false;

    // Filtering
    private string searchString = "";
    private VisitStatusDto? ActiveFilter { get; set; }
    private string statusFilterStr { get; set; } = "None";

    protected override async Task OnInitializedAsync()
    {
        var visits = await DataRepository.ReadAllVisits();
        foreach(var visit in visits){
            Visits.Add(visit);
        }
        _loading = false;
    }

    public async Task AddVisit()
    {
        VisitDto _visit = new VisitDto();
        _visit.Visitor = new VisitorDto();
        _visit.Company = new CompanyDto();
        _visit.ContactPerson = new ContactPersonDto();
        _visit.Status = VisitStatusDto.VISIT_PENDING;

        var parameters = new DialogParameters { ["visit"] = _visit, ["mode"]="Add" };
        var dialog = DialogService.Show<EditDialog>("Add Visit", parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            await DataRepository.AddVisit(visit.VisitStart??null, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email??null, VisitStatusDto.VISIT_PENDING);
            Visits.Add(visit);

            Snackbar.Add("Visit Added", Severity.Success);
            await JS.InvokeVoidAsync("console.log","Added visit.");
        }
    }

    public async Task EditVisit(VisitDto _visit)
    {
        var parameters = new DialogParameters { ["visit"]=_visit, ["mode"]="Edit" };
        var dialog = DialogService.Show<EditDialog>("Edit Visit", parameters, maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var visit = (VisitDto)result.Data;
            if (visit.VisitEnd != null)
                visit.Status = VisitStatusDto.VISIT_OVER;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??null, visit.Status, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);

            Snackbar.Add("Changes Saved", Severity.Success);
            await JS.InvokeVoidAsync("console.log","Visit updated.");
        }
    }

    public async Task SignOffVisit(VisitDto visit)
    {
        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to manually sign off this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Sign Off");
        parameters.Add("Color", Color.Warning);

        var dialog = DialogService.Show<Dialog>("Sign Off Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            visit.VisitEnd = DateTime.Now;
            visit.Status = VisitStatusDto.VISIT_OVER;
            await DataRepository.UpdateVisit(visit.Id, visit.VisitStart??null, visit.VisitEnd??DateTime.Now, visit.Status, visit.ContactPerson.Name, visit.Company.CompanyLabel, visit.Visitor.FirstName, visit.Visitor.LastName, visit.Visitor.PhoneNumber, visit.Visitor.Email);

            await JS.InvokeVoidAsync("console.log","Visitor signed off.");
        }
    }

    public async Task DeleteVisit(VisitDto visit)
    {
        var parameters = new DialogParameters { ["visit"]=visit };
        parameters.Add("ContentText", "Do you really want to delete this visitor? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var dialog = DialogService.Show<Dialog>("Delete Visitor", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DataRepository.RemoveVisit(visit.Id);
            Visits.Remove(visit);

            await JS.InvokeVoidAsync("console.log","Visit deleted.");
        }
    }

    private bool FilterFunc(VisitDto visit)
    {
        if(searchString != "" || ActiveFilter != null)
        {
            ShowCancelFilterButton();
        }
        if (visit.Status == ActiveFilter || ActiveFilter == null)
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (visit.Visitor.FirstName.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.Visitor.LastName.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.Visitor.Email != null)
                if (visit.Visitor.Email.ToLower().Contains(searchString.ToLower()))
                    return true;
            if (visit.Visitor.PhoneNumber.ToLower().Contains(searchString.ToLower()))
                return true;
            if (visit.ContactPerson.Name != null)
                if (visit.ContactPerson.Name.ToLower().Contains(searchString.ToLower()))
                    return true;
            if (visit.Company.CompanyLabel != null)
                if (visit.Company.CompanyLabel.ToLower().Contains(searchString.ToLower()))
                    return true;
        }
        return false;
    }

    private void ShowCancelFilterButton()
    {
        resetFilterBtnStyle = "visibility:visible;";
    }

    private void ResetFilters()
    {
        ActiveFilter = null;
        searchString = "";
        resetFilterBtnStyle = "visibility:hidden;";
    }

    private void OpenMenu(){
        JS.InvokeVoidAsync("console.log","TEST!");
        if (!menuOpen)
            menuOpen = true;
        else
            menuOpen = false;
        JS.InvokeVoidAsync("console.log",menuOpen.ToString());
    }
}